-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity atlagszamitas is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (11 downto 0);
    x_ap_vld : IN STD_LOGIC;
    x_ap_ack : OUT STD_LOGIC;
    N : IN STD_LOGIC_VECTOR (11 downto 0);
    z : OUT STD_LOGIC_VECTOR (23 downto 0);
    z_ap_vld : OUT STD_LOGIC );
end;


architecture behav of atlagszamitas is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "atlagszamitas,hls_ip_2016_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.200000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=36,HLS_SYN_LUT=76}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_17 : BOOLEAN;
    signal x_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_36 : BOOLEAN;
    signal tmp_2_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_92_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_52 : BOOLEAN;
    signal tmp_fu_102_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp1_reg_61 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_reg_72 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast_fu_83_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_cast_fu_98_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_87_p2 = ap_const_lv1_0)) and not(ap_sig_52))) then 
                i_reg_72 <= i_1_fu_92_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_72 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    tmp1_reg_61_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_87_p2 = ap_const_lv1_0)) and not(ap_sig_52))) then 
                tmp1_reg_61 <= tmp_fu_102_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                tmp1_reg_61 <= ap_const_lv23_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_2_fu_87_p2, ap_sig_52)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (((tmp_2_fu_87_p2 = ap_const_lv1_0) and not(ap_sig_52))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif ((not((tmp_2_fu_87_p2 = ap_const_lv1_0)) and not(ap_sig_52))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_87_p2, ap_sig_52)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_2_fu_87_p2 = ap_const_lv1_0) and not(ap_sig_52))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_87_p2, ap_sig_52)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_2_fu_87_p2 = ap_const_lv1_0) and not(ap_sig_52))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_17_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_17 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_36_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_36 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_52_assign_proc : process(x_ap_vld, tmp_2_fu_87_p2)
    begin
                ap_sig_52 <= (not((tmp_2_fu_87_p2 = ap_const_lv1_0)) and (x_ap_vld = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_17)
    begin
        if (ap_sig_17) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_36)
    begin
        if (ap_sig_36) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_92_p2 <= std_logic_vector(unsigned(i_reg_72) + unsigned(ap_const_lv11_1));
    i_cast_fu_83_p1 <= std_logic_vector(resize(unsigned(i_reg_72),12));
    tmp_2_fu_87_p2 <= "1" when (signed(i_cast_fu_83_p1) < signed(N)) else "0";
        tmp_4_cast_fu_98_p1 <= std_logic_vector(resize(signed(x),23));

    tmp_fu_102_p2 <= std_logic_vector(signed(tmp_4_cast_fu_98_p1) + signed(tmp1_reg_61));

    x_ap_ack_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_87_p2, ap_sig_52)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_87_p2 = ap_const_lv1_0)) and not(ap_sig_52))) then 
            x_ap_ack <= ap_const_logic_1;
        else 
            x_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    x_blk_n_assign_proc : process(x_ap_vld, ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_87_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_87_p2 = ap_const_lv1_0)))) then 
            x_blk_n <= x_ap_vld;
        else 
            x_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        z <= std_logic_vector(resize(signed(tmp1_reg_61),24));


    z_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_87_p2, ap_sig_52)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_2_fu_87_p2 = ap_const_lv1_0) and not(ap_sig_52))) then 
            z_ap_vld <= ap_const_logic_1;
        else 
            z_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
